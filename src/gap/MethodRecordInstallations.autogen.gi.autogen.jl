# SPDX-License-Identifier: GPL-2.0-or-later
# FreydCategoriesForCAP: Freyd categories - Formal (co)kernels for additive categories
#
# Implementations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecordTools.gi

## EpimorphismFromSomeProjectiveObjectForKernelObject
@InstallMethod( AddEpimorphismFromSomeProjectiveObjectForKernelObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "EpimorphismFromSomeProjectiveObjectForKernelObject", category, func, -1 );
    
end );

@InstallMethod( AddEpimorphismFromSomeProjectiveObjectForKernelObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "EpimorphismFromSomeProjectiveObjectForKernelObject", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## EpimorphismFromSomeProjectiveObjectForKernelObjectWithGivenSomeProjectiveObjectForKernelObject
@InstallMethod( AddEpimorphismFromSomeProjectiveObjectForKernelObjectWithGivenSomeProjectiveObjectForKernelObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "EpimorphismFromSomeProjectiveObjectForKernelObjectWithGivenSomeProjectiveObjectForKernelObject", category, func, -1 );
    
end );

@InstallMethod( AddEpimorphismFromSomeProjectiveObjectForKernelObjectWithGivenSomeProjectiveObjectForKernelObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "EpimorphismFromSomeProjectiveObjectForKernelObjectWithGivenSomeProjectiveObjectForKernelObject", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( EpimorphismFromSomeProjectiveObjectForKernelObjectWithGivenSomeProjectiveObjectForKernelObject,
                    "EpimorphismFromSomeProjectiveObjectForKernelObjectWithGivenSomeProjectiveObjectForKernelObject by calling EpimorphismFromSomeProjectiveObjectForKernelObject with the WithGiven argument(s) dropped",
                    [
                        [ EpimorphismFromSomeProjectiveObjectForKernelObject, 1 ],
                    ],
  function( cat, alpha, source )
    
    return EpimorphismFromSomeProjectiveObjectForKernelObject( cat, alpha );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( EpimorphismFromSomeProjectiveObjectForKernelObject,
                    "EpimorphismFromSomeProjectiveObjectForKernelObject by calling EpimorphismFromSomeProjectiveObjectForKernelObjectWithGivenSomeProjectiveObjectForKernelObject with the WithGiven object(s)",
                    [
                        [ EpimorphismFromSomeProjectiveObjectForKernelObjectWithGivenSomeProjectiveObjectForKernelObject, 1 ],
                        [ SomeProjectiveObjectForKernelObject, 1 ],
                    ],
  function( cat, alpha )
    
    return EpimorphismFromSomeProjectiveObjectForKernelObjectWithGivenSomeProjectiveObjectForKernelObject( cat, alpha, SomeProjectiveObjectForKernelObject( cat, alpha ) );
    
end; is_with_given_derivation = true );

## MonomorphismToSomeInjectiveObjectForCokernelObject
@InstallMethod( AddMonomorphismToSomeInjectiveObjectForCokernelObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "MonomorphismToSomeInjectiveObjectForCokernelObject", category, func, -1 );
    
end );

@InstallMethod( AddMonomorphismToSomeInjectiveObjectForCokernelObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "MonomorphismToSomeInjectiveObjectForCokernelObject", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## MonomorphismToSomeInjectiveObjectForCokernelObjectWithGivenSomeInjectiveObjectForCokernelObject
@InstallMethod( AddMonomorphismToSomeInjectiveObjectForCokernelObjectWithGivenSomeInjectiveObjectForCokernelObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "MonomorphismToSomeInjectiveObjectForCokernelObjectWithGivenSomeInjectiveObjectForCokernelObject", category, func, -1 );
    
end );

@InstallMethod( AddMonomorphismToSomeInjectiveObjectForCokernelObjectWithGivenSomeInjectiveObjectForCokernelObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "MonomorphismToSomeInjectiveObjectForCokernelObjectWithGivenSomeInjectiveObjectForCokernelObject", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( MonomorphismToSomeInjectiveObjectForCokernelObjectWithGivenSomeInjectiveObjectForCokernelObject,
                    "MonomorphismToSomeInjectiveObjectForCokernelObjectWithGivenSomeInjectiveObjectForCokernelObject by calling MonomorphismToSomeInjectiveObjectForCokernelObject with the WithGiven argument(s) dropped",
                    [
                        [ MonomorphismToSomeInjectiveObjectForCokernelObject, 1 ],
                    ],
  function( cat, alpha, range )
    
    return MonomorphismToSomeInjectiveObjectForCokernelObject( cat, alpha );
        
end; is_with_given_derivation = true );

AddDerivationToCAP( MonomorphismToSomeInjectiveObjectForCokernelObject,
                    "MonomorphismToSomeInjectiveObjectForCokernelObject by calling MonomorphismToSomeInjectiveObjectForCokernelObjectWithGivenSomeInjectiveObjectForCokernelObject with the WithGiven object(s)",
                    [
                        [ MonomorphismToSomeInjectiveObjectForCokernelObjectWithGivenSomeInjectiveObjectForCokernelObject, 1 ],
                        [ SomeInjectiveObjectForCokernelObject, 1 ],
                    ],
  function( cat, alpha )
    
    return MonomorphismToSomeInjectiveObjectForCokernelObjectWithGivenSomeInjectiveObjectForCokernelObject( cat, alpha, SomeInjectiveObjectForCokernelObject( cat, alpha ) );
    
end; is_with_given_derivation = true );

## SomeInjectiveObjectForCokernelObject
@InstallMethod( AddSomeInjectiveObjectForCokernelObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "SomeInjectiveObjectForCokernelObject", category, func, -1 );
    
end );

@InstallMethod( AddSomeInjectiveObjectForCokernelObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "SomeInjectiveObjectForCokernelObject", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);

## SomeProjectiveObjectForKernelObject
@InstallMethod( AddSomeProjectiveObjectForKernelObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "SomeProjectiveObjectForKernelObject", category, func, -1 );
    
end );

@InstallMethod( AddSomeProjectiveObjectForKernelObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    @FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "SomeProjectiveObjectForKernelObject", category, func, weight; IsPrecompiledDerivation = IsPrecompiledDerivation );
            
        end
    )
);
